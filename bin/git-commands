#!/bin/bash

alias git='GIT_AUTHOR_EMAIL=$(
p=$(pwd)
while [[ $p != "$HOME" ]]; do
	[ -e $p/.gitemail ] && cat $p/.gitemail && break
	p=$(dirname $p)
done
if [ $p = "$HOME" ]; then 
	/usr/local/bin/git config user.email
fi) GIT_COMMITTER_EMAIL=$(
p=$(pwd)
while [[ $p != "$HOME" ]]; do
	[ -e $p/.gitemail ] && cat $p/.gitemail && break
	p=$(dirname $p)
done
if [ $p = "$HOME" ]; then 
	/usr/local/bin/git config user.email
fi) /usr/local/bin/git'
alias g=git

alias gitwho='echo author=$(
p=$(pwd)
while [[ $p != "$HOME" ]]; do
	[ -e $p/.gitemail ] && cat $p/.gitemail && break
	p=$(dirname $p)
done
if [ $p = "$HOME" ]; then 
	/usr/local/bin/git config user.email
fi)'

function gf() {
	local branch=$1
	if [ "$branch" ]; then
		echo Fetching branch $branch
		git checkout $branch
	else
		branch=`git rev-parse --abbrev-ref HEAD`
		echo Fetching branch $branch
	fi

	local stash=0
	if [ `git status --porcelain | wc -l` -ne 0 ]; then
		git stash
		stash=1
	fi
	git fetch origin
	git rebase origin/$branch
	if [ $stash -eq 1 ]; then
		git stash pop
	fi
}

function git_qa() {
	local sprint=$1
	if [ -z "$sprint" ]; then
		echo "Usage: git_qa sprint-X"
		return -1
	fi

	local qa_branch=$sprint-qa
	echo Creating QA branch $qa_branch
	gf develop
	git checkout -b $qa_branch
	git push origin $qa_branch
}

function git_merge_tag() {
	local new_tag=$1
	if [ -z "$new_tag" ]; then
		echo "Usage: git_merge_tag new-tag"
		exit -1
	fi
	local branch=$new_tag-qa

	echo Tagging QA branch $branch and merging...
	git checkout develop
	git fetch origin
	git merge origin/$branch || return  -1
	git push origin develop || return -1

	git checkout $branch
	git rebase origin/$branch || return -1
	if [ -z `git branch | grep master` ]; then
		echo Creating master branch
		git branch master
	fi
	git checkout master
	git merge origin/$branch || return -1
	git tag $new_tag
	git push origin master --tags
	git branch -d $branch
	git push origin :$branch
	echo QA branched tagged and merged to master
}

function git_clean() {
	git checkout master
	git branch --merged | cut -c3- | xargs git branch -d
	git remote prune origin
}
